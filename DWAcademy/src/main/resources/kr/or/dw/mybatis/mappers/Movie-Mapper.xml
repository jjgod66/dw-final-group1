<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.dw.dao.MovieDAO">

	<select id="selectBoxOfficeMovie10" resultType="Map">
		SELECT m2.movie_cd movie_cd, reserve, movie_name, movie_grade, movie_length, movie_mainpic_path, opendate
		FROM (
			SELECT m.movie_cd, nvl(sum(reserve), 0) reserve
			FROM (
				SELECT s.*, reserve
				FROM (
					SELECT count(*) reserve, screen_cd
					FROM reservation
					WHERE TO_CHAR(resdate, 'YYYYMMDD') =  TO_CHAR(sysdate - 1, 'YYYYMMDD') 
					AND gb_cancel = 'N'
					GROUP BY screen_cd
					) r, screen s
				WHERE r.screen_cd(+) = s.screen_cd
				) s, movie m
			WHERE s.movie_cd(+) = m.movie_cd
			GROUP BY m.movie_cd
			) m1, movie m2
		WHERE m1.movie_cd = m2.movie_cd
		AND enddate <![CDATA[>]]> SYSDATE
		AND movie_name like '%' || #{keyword} || '%'
		ORDER BY reserve DESC NULLS last
	</select>
	
	<select id="selectMovieDetail" parameterType="str" resultType="movie">
		SELECT *
		FROM movie
		WHERE movie_cd = #{movie_cd}
	</select>
	
	<select id="selectMoviePicture" parameterType="str" resultType="moviePic">
		SELECT *
		FROM movie_picture
		WHERE movie_cd = #{movie_cd}
	</select>
	
	<select id="selectMoviePreview" parameterType="str" resultType="moviePre">
		SELECT *
		FROM movie_preview
		WHERE movie_cd = #{movie_cd}
	</select>
	
	<select id="selectMoviePostByCd" parameterType="str" resultType="moviepost">
		SELECT *
		FROM moviepost
		WHERE movie_cd = #{movie_cd}
	</select>
	
	<select id="selectReviewByCd" parameterType="str" resultType="review">
		SELECT *
		FROM review
		WHERE movie_cd = #{movie_cd}
	</select>
	
	<select id="selectMovieTypeByCd" parameterType="str" resultType="str">
		SELECT movie_type_des
		FROM movie_type_c c, movie_type t
		WHERE c.movie_type_cd = t.movie_type_cd
		AND movie_cd = #{movie_cd}
	</select>
	
	<select id="selectMovieGenreByCd" parameterType="str" resultType="str">
		SELECT genre_name
		FROM genre_c c, genre g 
		WHERE c.genre_cd = g.genre_cd 
		AND movie_cd = #{movie_cd}
	</select>
	
	<select id="selectSearchAllMovie" resultType="Map">
		SELECT m2.movie_cd, reserve, movie_name, movie_grade, movie_length, movie_mainpic_path, opendate
		FROM (
			SELECT m.movie_cd, nvl(sum(reserve), 0) reserve
			FROM (
				SELECT s.*, reserve
				FROM (
					SELECT count(*) reserve, screen_cd
					FROM reservation
					WHERE TO_CHAR(resdate, 'YYYYMMDD') =  TO_CHAR(sysdate - 1, 'YYYYMMDD') 
					AND gb_cancel = 'N'
					GROUP BY screen_cd
					) r, screen s
				WHERE r.screen_cd(+) = s.screen_cd
				) s, movie m
			WHERE s.movie_cd(+) = m.movie_cd
			GROUP BY m.movie_cd
			) m1, movie m2
		WHERE m1.movie_cd = m2.movie_cd
		AND enddate <![CDATA[>]]> SYSDATE
		AND movie_name like '%' || #{keyword} || '%'
		<if test="searchType == 'reserve'.toString()">
			ORDER BY reserve DESC NULLS last
		</if>
		<if test="searchType == 'movie_name'.toString()">
			ORDER BY movie_name
		</if>
		<if test="searchType == 'opendate'.toString()">
			ORDER BY opendate
		</if>
	</select>
	
	<select id="selectYesAllReserver" resultType="int">
		SELECT count(*) all_reserver
		FROM reservation
		WHERE TO_CHAR(resdate, 'YYYYMMDD') =  TO_CHAR(sysdate - 1, 'YYYYMMDD')
		AND GB_CANCEL = 'N'
	</select>
	
	<select id="selectSearchScreenMovie" resultType="Map">
		SELECT m2.movie_cd, reserve, movie_name, movie_grade, movie_length, movie_mainpic_path, opendate
		FROM (
			SELECT m.movie_cd, nvl(sum(reserve), 0) reserve
			FROM (
				SELECT s.*, reserve
				FROM (
					SELECT count(*) reserve, screen_cd
					FROM reservation
					WHERE TO_CHAR(resdate, 'YYYYMMDD') =  TO_CHAR(sysdate - 1, 'YYYYMMDD') 
					AND gb_cancel = 'N'
					GROUP BY screen_cd
					) r, screen s
				WHERE r.screen_cd(+) = s.screen_cd
				) s, movie m
			WHERE s.movie_cd(+) = m.movie_cd
			GROUP BY m.movie_cd
			) m1, movie m2
		WHERE m1.movie_cd = m2.movie_cd
		AND enddate <![CDATA[>]]> SYSDATE
		AND opendate <![CDATA[<]]> sysdate
		AND movie_name like '%' || #{keyword} || '%'
		<if test="searchType == 'reserve'.toString()">
			ORDER BY reserve DESC NULLS last
		</if>
		<if test="searchType == 'movie_name'.toString()">
			ORDER BY movie_name
		</if>
		<if test="searchType == 'opendate'.toString()">
			ORDER BY opendate
		</if>
	</select>
	
	<select id="selectSearchComingMovie" resultType="Map">
		SELECT m2.movie_cd, reserve, movie_name, movie_grade, movie_length, movie_mainpic_path, opendate
		FROM (
			SELECT m.movie_cd, nvl(sum(reserve), 0) reserve
			FROM (
				SELECT s.*, reserve
				FROM (
					SELECT count(*) reserve, screen_cd
					FROM reservation
					WHERE TO_CHAR(resdate, 'YYYYMMDD') =  TO_CHAR(sysdate - 1, 'YYYYMMDD') 
					AND gb_cancel = 'N'
					GROUP BY screen_cd
					) r, screen s
				WHERE r.screen_cd(+) = s.screen_cd
				) s, movie m
			WHERE s.movie_cd(+) = m.movie_cd
			GROUP BY m.movie_cd
			) m1, movie m2
		WHERE m1.movie_cd = m2.movie_cd
		AND enddate <![CDATA[>]]> SYSDATE
		AND opendate <![CDATA[>]]> sysdate
		AND movie_name like '%' || #{keyword} || '%'
		<if test="searchType == 'reserve'.toString()">
			ORDER BY reserve DESC NULLS last
		</if>
		<if test="searchType == 'movie_name'.toString()">
			ORDER BY movie_name
		</if>
		<if test="searchType == 'opendate'.toString()">
			ORDER BY opendate
		</if>
	</select>
	
	<select id="selectLikeGenreMovie" resultType="Map">
		SELECT mcd.movie_cd, nvl(reserve, 0) reserve, movie_name, movie_grade, movie_length, movie_mainpic_path, opendate
		FROM (
			SELECT movie_cd, nvl(sum(reserve), 0) reserve
			FROM (
				SELECT count(*) reserve, screen_cd
				FROM reservation
				WHERE TO_CHAR(resdate, 'YYYYMMDD') =  TO_CHAR(sysdate - 1, 'YYYYMMDD') 
				AND gb_cancel = 'N'
				GROUP BY screen_cd
				) r, screen s
			WHERE r.screen_cd(+) = s.screen_cd
			GROUP BY movie_cd
			) res,
			(
			SELECT m.movie_cd
			FROM genre_c gc, movie m
			WHERE gc.movie_cd = m.movie_cd
			AND (genre_cd = #{likegenre1}
			<if test="likegenre2!=null and !likegenre2.equals('')">
				OR genre_cd = #{likegenre2}
			</if>
			<if test="likegenre3!=null and !likegenre3.equals('')">
				OR genre_cd = #{likegenre3}
			</if>
			)
			GROUP BY m.movie_cd
			) mcd, movie m
		WHERE res.movie_cd(+) = mcd.movie_cd	
		AND m.movie_cd = mcd.movie_cd
		AND enddate <![CDATA[>]]> SYSDATE
		AND movie_name like '%' || #{keyword} || '%'
		<if test="searchType == 'reserve'.toString()">
			ORDER BY reserve DESC NULLS last
		</if>
		<if test="searchType == 'movie_name'.toString()">
			ORDER BY movie_name
		</if>
		<if test="searchType == 'opendate'.toString()">
			ORDER BY opendate
		</if>
	</select>
	
	<select id="selectMovieLikeExist" resultType="int">
		SELECT COUNT(*)
		FROM movie_like
		WHERE movie_cd = #{movie_cd}
		AND mem_cd = #{mem_cd}
	</select>
	
	<insert id="insertMovieLike">
		INSERT INTO movie_like (movie_cd, mem_cd) VALUES (#{movie_cd}, #{mem_cd})
	</insert>
	
	<delete id="deleteMovieLike">
		DELETE movie_like
		WHERE movie_cd = #{movie_cd}
		AND mem_cd = #{mem_cd}
	</delete>
	
	<select id="selectMovieLikeCount" resultType="int">
		SELECT COUNT(*)
		FROM movie_like
		WHERE movie_cd = #{movie_cd}
	</select>
	
	<select id="selectMovieAllReservers" resultType="int">
		SELECT COUNT(*)
		FROM reservation r, screen s, movie m
		WHERE r.screen_cd = s.screen_cd
		AND s.MOVIE_CD = m.MOVIE_CD 
		AND s.movie_cd = #{movie_cd}
		AND startdate <![CDATA[<]]> sysdate
		AND GB_CANCEL = 'N'
	</select>
	
	<select id="selectYesMovieReserver" resultType="int">
		SELECT COUNT(*)
		FROM reservation r, screen s, movie m
		WHERE r.screen_cd = s.screen_cd
		AND s.movie_cd = m.movie_cd 
		AND s.movie_cd = #{movie_cd}
		AND TO_CHAR(resdate, 'YYYYMMDD') = TO_CHAR(sysdate - 1, 'YYYYMMDD') 
		AND GB_CANCEL = 'N'
	</select>
	
	<select id="selectMovieWatchYN" resultType="int">
		SELECT COUNT(*)
		FROM reservation r, screen s
		WHERE r.screen_cd = s.screen_cd
		AND mem_cd = #{mem_cd}
		AND movie_cd = #{movie_cd}
		AND gb_cancel = 'N'
		AND startdate <![CDATA[<]]> sysdate
	</select>
	
	<select id="selectMovieReviewYN" resultType="int">
		SELECT count(*)
		FROM review
		WHERE mem_cd = #{mem_cd}
		AND movie_cd = #{movie_cd}
		AND gb_del = 'N'
	</select>
	
	<insert id="insertReview" parameterType="review">
		INSERT INTO review (review_no, mem_cd, movie_cd, review_rating, review_content, regdate, gb_del) 
		VALUES (review_seq.nextval, #{mem_cd}, #{movie_cd}, #{review_rating}, #{review_content}, sysdate, 'N')
	</insert>
	
	<select id="selectReview3" resultType="Map">
		SELECT r.*, nvl(reviewlike, 0) reviewlike, mem_id, mem_pic_path
		FROM (
			SELECT count(*) reviewlike, review_no
			FROM review_like
			GROUP BY review_no
			)rl, review r, MEMBER m
		WHERE rl.review_no(+) = r.review_no
		AND r.mem_cd = m.mem_cd
		AND r.gb_del = 'N'
		AND movie_cd = #{movie_cd}
		AND rownum <![CDATA[<=]]> 3
	</select>
	
	<insert id="insertReviewLike">
		INSERT INTO review_like (review_no, mem_cd) VALUES(#{review_no}, #{mem_cd})
	</insert>
	
	<delete id="deleteReviewLike">
		DELETE review_like 
		WHERE review_no = #{review_no}
		AND mem_cd = #{mem_cd}
	</delete>
	
	<select id="selectReviewLikeYN" resultType="int">
		SELECT COUNT(*)
		FROM review_like
		WHERE mem_cd = #{mem_cd}
		AND review_no = #{review_no}
	</select>
	
	<select id="reviewReportYN" resultType="int">
		SELECT COUNT(*)
		FROM review_report
		WHERE review_no = #{review_no}
		AND mem_cd = #{mem_cd}
	</select>
	
	<insert id="insertReviewReport">
		INSERT INTO review_report (review_no, mem_cd) VALUES(#{review_no}, #{mem_cd})
	</insert>
	
	<update id="updateReview">
		UPDATE review SET review_content = #{review_content}, review_rating = #{review_rating}, updatedate = sysdate
		WHERE review_no = #{review_no}
	</update>
	
	<select id="selectMemLikeGenre" resultType="str">
		SELECT genre_cd
		FROM mem_like_genre
		where mem_cd = #{mem_cd}
	</select>
	
	<select id="selectMovieRateAvg" resultType="double">
		SELECT nvl(ROUND(avg(review_rating), 3),0)
		FROM review
		WHERE movie_cd = #{movie_cd}
	</select>
	
	<select id="selectMoviePostMap" resultType="Map">
		SELECT mp.movie_cd, mp.movie_pic_no, movie_pic_path, mpost_content, mp.regdate, movie_name, mpost_no, mem_id 
		FROM moviepost mp, movie m, movie_picture p, MEMBER mb
		WHERE mp.movie_cd = m.movie_cd
		AND mp.mem_cd = mb.mem_cd
		AND p.movie_pic_no = mp.movie_pic_no
		AND mp.gb_del = 'N'
		AND mp.movie_cd = #{movie_cd}
	</select>
	
	<select id="selectSearchMoviePostList" resultType="Map">
		SELECT mp.movie_cd, mp.movie_pic_no, movie_pic_path, mpost_content, mp.regdate, movie_name, mp.mpost_no, mem_id, mp.mem_cd, nvl(likecnt, 0) likecnt, nvl(replycnt, 0) replycnt
		FROM moviepost mp, movie m, movie_picture p, MEMBER mb
			,(SELECT COUNT(*) likecnt, mpost_no
			FROM mp_like
			GROUP BY mpost_no) ml,
			(SELECT COUNT(*) replycnt, mpost_no
			FROM reply
			GROUP BY mpost_no) mr
		WHERE mp.movie_cd = m.movie_cd
		AND mp.mem_cd = mb.mem_cd
		AND p.movie_pic_no = mp.movie_pic_no
		AND mp.mpost_no = ml.mpost_no(+)
		AND mp.mpost_no = mr.mpost_no(+)
		AND mp.gb_del = 'N'
		AND movie_name like '%' || #{keyword} || '%'
		<if test="searchType == 'like'.toString()">
			ORDER BY likecnt DESC NULLS last
		</if>
		<if test="searchType == 'regdate'.toString()">
			ORDER BY mp.regdate DESC
		</if>
	</select>
	
	<select id="selectSearchMoviePostcnt" resultType="int">
		SELECT COUNT(*)
		FROM moviepost mp, movie m, movie_picture p, MEMBER mb
			,(SELECT COUNT(*) likecnt, mpost_no
			FROM mp_like
			GROUP BY mpost_no) ml,
			(SELECT COUNT(*) replycnt, mpost_no
			FROM reply
			GROUP BY mpost_no) mr
		WHERE mp.movie_cd = m.movie_cd
		AND mp.mem_cd = mb.mem_cd
		AND p.movie_pic_no = mp.movie_pic_no
		AND mp.mpost_no = ml.mpost_no(+)
		AND mp.mpost_no = mr.mpost_no(+)
		AND mp.gb_del = 'N'
		AND movie_name like '%' || #{keyword} || '%'
	</select>
</mapper>