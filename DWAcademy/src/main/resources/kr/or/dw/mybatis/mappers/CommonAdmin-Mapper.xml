<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.dw.dao.CommonAdminDAO">
	
	<sql id="searchMovieStatistics">
		<if test="searchType2 == ''.toString()">
		</if>
		<if test="searchType2 == 'day'.toString()">
			AND to_char(resdate, 'yyyy-MM-dd') = #{keyword}
		</if>
		<if test="searchType2 == 'week'.toString()">
			AND to_char(resdate, 'yyyy-MM-dd') <![CDATA[<]]> to_char(TRUNC(TO_DATE(#{keyword})+7, 'dy'), 'yyyy-MM-dd')
			AND to_char(resdate, 'yyyy-MM-dd') <![CDATA[>=]]> to_char(TRUNC(TO_DATE(#{keyword}), 'dy'), 'yyyy-MM-dd')
		</if>
		<if test="searchType2 == 'month'.toString()">
			AND to_char(resdate, 'yyyy-MM') = TO_CHAR(TO_DATE(#{keyword}), 'yyyy-MM')
		</if>
	</sql>
	
	<sql id="searchMovieStatistics2">
		<if test="searchType != 'S202307200022'.toString()">
			AND t.admin_cd = #{searchType}
		</if>
	</sql>
	
	<select id="selectThrList" resultType="map">
		SELECT a.admin_cd, a.thr_name
		  FROM admin a, theater t
		 WHERE a.admin_cd = t.admin_cd(+)
		   and a.admin_cd != '${admin_cd}'
		 ORDER BY a.ADMIN_CD
	</select>
	
	<insert id="insertNote">
		INSERT INTO admin_note
					(
					 note_no
					,note_sender
					,note_receiver
					,note_title
					,note_content
					,senddate
					,gb_del_sender
					,gb_del_receiver
					,gb_read
					)
			 VALUES (
			 		 note_seq.nextval
			 		,#{note_sender}
			 		,#{note_receiver}
			 		,#{note_title}
			 		,#{note_content}
			 		,SYSDATE
			 		,'N'
			 		,'N'
			 		,'N'
			 		)
	</insert>
	
	<select id="selectReceivedNoteListCount" resultType="int">
		SELECT COUNT(*)
		  FROM admin_note
		 WHERE note_receiver = #{admin_cd}
		   AND gb_del_receiver = 'N'
	</select>
	
	<select id="selectReceivedNoteList" resultType="map">
		SELECT * 
		  FROM (
				SELECT * 
				  FROM (
						SELECT *
						  FROM (
								SELECT an.*, NVL(t.thr_name, 'DW시네마') thr_name
								  FROM admin_note an, theater t
								 WHERE note_receiver = #{admin_cd}
								   AND an.note_sender = t.admin_cd(+)
								   AND gb_del_receiver = 'N'
								 ORDER BY an.note_no DESC
						  		)
				  		 WHERE ROWNUM <![CDATA[<=]]> #{perPageNum} * #{page}
				  		 ORDER BY NOTE_NO ASC
						)
				)
		<if test="totalCount lt perPageNum * page">
		  WHERE ROWNUM <![CDATA[<=]]> #{totalCount} - (#{page} - 1) * #{perPageNum}
		</if>
		<if test="totalCount gte perPageNum * page">
		  WHERE ROWNUM <![CDATA[<=]]> #{perPageNum}
		</if>
		  ORDER BY NOTE_NO DESC
	</select>
	
	<select id="selectSendedNoteListCount" resultType="int">
		SELECT COUNT(*)
		  FROM admin_note
		 WHERE note_sender = #{admin_cd}
		   AND gb_del_sender = 'N'
	</select>
	
	<select id="selectSendedNoteList" resultType="map">
		SELECT * 
		  FROM (
				SELECT * 
				  FROM (
						SELECT *
						  FROM (
								SELECT an.*, NVL(t.thr_name, 'DW시네마') thr_name
								  FROM admin_note an, theater t
								 WHERE note_sender = #{admin_cd}
								   AND an.note_receiver = t.admin_cd(+)
								   AND gb_del_sender = 'N'
								 ORDER BY an.note_no DESC
						  		)
				  		 WHERE ROWNUM <![CDATA[<=]]> #{perPageNum} * #{page}
				  		 ORDER BY NOTE_NO ASC
						)
				)
		<if test="totalCount lt perPageNum * page">
		  WHERE ROWNUM <![CDATA[<=]]> #{totalCount} - (#{page} - 1) * #{perPageNum}
		</if>
		<if test="totalCount gte perPageNum * page">
		  WHERE ROWNUM <![CDATA[<=]]> #{perPageNum}
		</if>
		  ORDER BY NOTE_NO DESC
	</select>
	
	<select id="selectNoteByNote_no" resultType="map">
		SELECT an.*, NVL(t.thr_name, 'DW시네마') thr_name
		   <if test="note_type == 'R'.toString()">
		   , (SELECT COUNT(*) 
		   		FROM ADMIN_NOTE an2 
		   	   WHERE NOTE_RECEIVER = (SELECT NOTE_RECEIVER 
		   	   							FROM ADMIN_NOTE an 
		   	   						   WHERE NOTE_NO=#{note_no} 
		   	   						  )
		   	     AND GB_READ = 'N'
		   	     AND GB_DEL_RECEIVER = 'N') UNREADEDCNT
		   </if>
		  FROM admin_note an, theater t
		 WHERE note_no = #{note_no}
		   <if test="note_type == 'S'.toString()">
		   AND an.note_receiver = t.admin_cd(+)
		   </if>
		   <if test="note_type == 'R'.toString()">
		   AND an.note_sender = t.admin_cd(+)
		   </if>
	</select>
	
	<update id="deleteNote">
		UPDATE admin_note
		<if test="note_type =='S'.toString()">
		   SET gb_del_sender = 'Y'
		</if>
		<if test="note_type =='R'.toString()">
		   SET gb_del_receiver = 'Y'
		</if>
		 WHERE note_no = #{note_no}
	</update>
	
	<update id="updateGb_read">
		UPDATE admin_note
		   SET gb_read = 'Y'
		 WHERE note_no = #{note_no}
	</update>
	
	<select id="selectUnreadedNoteCnt" resultType="int">
		SELECT COUNT(*)
		  FROM admin_note
		 WHERE note_receiver = #{admin_cd}
		   AND gb_read = 'N'
		   AND gb_del_receiver = 'N'
	</select>
	
	<select id="selectStatisticsMovieList" resultType="map">
		SELECT movie_name, opendate, nvl(yessales,0) sales_yesterday, nvl(yesPer,0) seat_yesterday
			 , nvl(allsales,0) sales_all, nvl(allPer,0) seat_all
			 , nvl(allScreen,0) screencnt, nvl(yesAllsales,0) sales_all_yesterday
		  FROM movie m,
		      (SELECT movie_cd, count(*) allScreen
		      	 FROM screen s, theater t, house h
		      	WHERE s.house_no = h.house_no
		      	  AND t.thr_name = h.thr_name
		      	  <include refid="searchMovieStatistics2"/>
		      	GROUP BY movie_cd)
		      a,
		      (SELECT sum(pricesum) allsales, movie_cd, count(*) allPer
		      	 FROM reservation r, screen s, theater t, house h
		      	WHERE r.screen_cd = s.screen_cd
		      	  AND s.house_no = h.house_no
		      	  AND t.thr_name = h.thr_name
		      	  AND r.resdate <![CDATA[<]]> SYSDATE
		      	  <include refid="searchMovieStatistics2"/>
		          AND r.GB_CANCEL = 'N'
		        GROUP BY movie_cd) 
		      b,
		      (SELECT sum(pricesum) yessales, movie_cd, count(*) yesPer
		      	 FROM reservation r, screen s, theater t, house h
		     	WHERE r.screen_cd = s.screen_cd
		     	  AND s.house_no = h.house_no
		     	  AND t.thr_name = h.thr_name
			      <include refid="searchMovieStatistics2"/>
			      <include refid="searchMovieStatistics"/>
			      AND r.GB_CANCEL = 'N'
		        GROUP BY movie_cd)
		      c,
		      (SELECT sum(pricesum) yesAllsales
		      	 FROM reservation r, screen s, theater t, house h
		      	WHERE r.screen_cd = s.screen_cd
		      	  AND s.house_no = h.house_no
		      	  AND t.thr_name = h.thr_name
		      	  AND r.resdate <![CDATA[<]]> SYSDATE
		      	  <include refid="searchMovieStatistics2"/>
		      	  <include refid="searchMovieStatistics"/>
		      	  AND r.GB_CANCEL = 'N')
		      d
		 WHERE m.movie_cd = a.movie_cd(+)
		   AND m.movie_cd = b.movie_cd(+)
		   AND m.movie_cd = c.movie_cd(+)
		   AND to_char(m.enddate, 'yyyyMMdd') <![CDATA[>=]]> to_char(sysdate, 'yyyyMMdd')
		ORDER BY sales_yesterday DESC, sales_all DESC
	</select>
	<select id="selectStatisticsMovieListCount" resultType="int">
		SELECT COUNT(*)
		  FROM (
				SELECT movie_name, opendate, nvl(yessales,0) sales_yesterday, nvl(yesPer,0) seat_yesterday
					 , nvl(allsales,0) sales_all, nvl(allPer,0) seat_all
					 , nvl(allScreen,0) screencnt, nvl(yesAllsales,0) sales_all_yesterday
				  FROM movie m,
				      (SELECT movie_cd, count(*) allScreen
				      	 FROM screen s, theater t, house h
				      	WHERE s.house_no = h.house_no
				      	  AND t.thr_name = h.thr_name
				      	  <include refid="searchMovieStatistics2"/>
				      	GROUP BY movie_cd)
				      a,
				      (SELECT sum(pricesum) allsales, movie_cd, count(*) allPer
				      	 FROM reservation r, screen s, theater t, house h
				      	WHERE r.screen_cd = s.screen_cd
				      	  AND s.house_no = h.house_no
				      	  AND t.thr_name = h.thr_name
				      	  AND r.resdate <![CDATA[<]]> SYSDATE
				      	  <include refid="searchMovieStatistics2"/>
				          AND r.GB_CANCEL = 'N'
				        GROUP BY movie_cd) 
				      b,
				      (SELECT sum(pricesum) yessales, movie_cd, count(*) yesPer
				      	 FROM reservation r, screen s, theater t, house h
				     	WHERE r.screen_cd = s.screen_cd
				     	  AND s.house_no = h.house_no
				     	  AND t.thr_name = h.thr_name
					      <include refid="searchMovieStatistics2"/>
					      <include refid="searchMovieStatistics"/>
					      AND r.GB_CANCEL = 'N'
				        GROUP BY movie_cd)
				      c,
				      (SELECT sum(pricesum) yesAllsales
				      	 FROM reservation r, screen s, theater t, house h
				      	WHERE r.screen_cd = s.screen_cd
				      	  AND s.house_no = h.house_no
				      	  AND t.thr_name = h.thr_name
				      	  AND r.resdate <![CDATA[<]]> SYSDATE
				      	  <include refid="searchMovieStatistics2"/>
				      	  <include refid="searchMovieStatistics"/>
				      	  AND GB_CANCEL = 'N')
				      d
				 WHERE m.movie_cd = a.movie_cd(+)
				   AND m.movie_cd = b.movie_cd(+)
				   AND m.movie_cd = c.movie_cd(+)
				   AND to_char(m.enddate, 'yyyyMMdd') <![CDATA[>=]]> to_char(sysdate, 'yyyyMMdd')
				ORDER BY sales_yesterday DESC, sales_all DESC
			)
	</select>
</mapper>