<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.dw.dao.CommonAdminDAO">

	<select id="selectThrList" resultType="map">
		SELECT a.admin_cd, a.thr_name
		  FROM admin a, theater t
		 WHERE a.admin_cd = t.admin_cd(+)
		   and a.admin_cd != '${admin_cd}'
		 ORDER BY a.ADMIN_CD
	</select>
	
	<insert id="insertNote">
		INSERT INTO admin_note
					(
					 note_no
					,note_sender
					,note_receiver
					,note_title
					,note_content
					,senddate
					,gb_del_sender
					,gb_del_receiver
					,gb_read
					)
			 VALUES (
			 		 note_seq.nextval
			 		,#{note_sender}
			 		,#{note_receiver}
			 		,#{note_title}
			 		,#{note_content}
			 		,SYSDATE
			 		,'N'
			 		,'N'
			 		,'N'
			 		)
	</insert>
	
	<select id="selectReceivedNoteListCount" resultType="int">
		SELECT COUNT(*)
		  FROM admin_note
		 WHERE note_receiver = #{admin_cd}
		   AND gb_del_receiver = 'N'
	</select>
	
	<select id="selectReceivedNoteList" resultType="map">
		SELECT * 
		  FROM (
				SELECT * 
				  FROM (
						SELECT *
						  FROM (
								SELECT an.*, NVL(t.thr_name, 'DW시네마') thr_name
								  FROM admin_note an, theater t
								 WHERE note_receiver = #{admin_cd}
								   AND an.note_sender = t.admin_cd(+)
								   AND gb_del_receiver = 'N'
								 ORDER BY an.note_no DESC
						  		)
				  		 WHERE ROWNUM <![CDATA[<=]]> #{perPageNum} * #{page}
				  		 ORDER BY NOTE_NO ASC
						)
				)
		<if test="totalCount lt perPageNum * page">
		  WHERE ROWNUM <![CDATA[<=]]> #{totalCount} - (#{page} - 1) * #{perPageNum}
		</if>
		<if test="totalCount gte perPageNum * page">
		  WHERE ROWNUM <![CDATA[<=]]> #{perPageNum}
		</if>
		  ORDER BY NOTE_NO DESC
	</select>
	
	<select id="selectSendedNoteListCount" resultType="int">
		SELECT COUNT(*)
		  FROM admin_note
		 WHERE note_sender = #{admin_cd}
		   AND gb_del_sender = 'N'
	</select>
	
	<select id="selectSendedNoteList" resultType="map">
		SELECT * 
		  FROM (
				SELECT * 
				  FROM (
						SELECT *
						  FROM (
								SELECT an.*, NVL(t.thr_name, 'DW시네마') thr_name
								  FROM admin_note an, theater t
								 WHERE note_sender = #{admin_cd}
								   AND an.note_receiver = t.admin_cd(+)
								   AND gb_del_sender = 'N'
								 ORDER BY an.note_no DESC
						  		)
				  		 WHERE ROWNUM <![CDATA[<=]]> #{perPageNum} * #{page}
				  		 ORDER BY NOTE_NO ASC
						)
				)
		<if test="totalCount lt perPageNum * page">
		  WHERE ROWNUM <![CDATA[<=]]> #{totalCount} - (#{page} - 1) * #{perPageNum}
		</if>
		<if test="totalCount gte perPageNum * page">
		  WHERE ROWNUM <![CDATA[<=]]> #{perPageNum}
		</if>
		  ORDER BY NOTE_NO DESC
	</select>
	
	<select id="selectNoteByNote_no" resultType="map">
		SELECT an.*, NVL(t.thr_name, 'DW시네마') thr_name
		   <if test="note_type == 'R'.toString()">
		   , (SELECT COUNT(*) 
		   		FROM ADMIN_NOTE an2 
		   	   WHERE NOTE_RECEIVER = (SELECT NOTE_RECEIVER 
		   	   							FROM ADMIN_NOTE an 
		   	   						   WHERE NOTE_NO=#{note_no} 
		   	   						  )
		   	     AND GB_READ = 'N'
		   	     AND GB_DEL_RECEIVER = 'N') UNREADEDCNT
		   </if>
		  FROM admin_note an, theater t
		 WHERE note_no = #{note_no}
		   <if test="note_type == 'S'.toString()">
		   AND an.note_receiver = t.admin_cd(+)
		   </if>
		   <if test="note_type == 'R'.toString()">
		   AND an.note_sender = t.admin_cd(+)
		   </if>
	</select>
	
	<update id="deleteNote">
		UPDATE admin_note
		<if test="note_type =='S'.toString()">
		   SET gb_del_sender = 'Y'
		</if>
		<if test="note_type =='R'.toString()">
		   SET gb_del_receiver = 'Y'
		</if>
		 WHERE note_no = #{note_no}
	</update>
	
	<update id="updateGb_read">
		UPDATE admin_note
		   SET gb_read = 'Y'
		 WHERE note_no = #{note_no}
	</update>
	
	<select id="selectUnreadedNoteCnt" resultType="int">
		SELECT COUNT(*)
		  FROM admin_note
		 WHERE note_receiver = #{admin_cd}
		   AND gb_read = 'N'
		   AND gb_del_receiver = 'N'
	</select>
	
	<select id="selectStatisticsMovie" resultType="map">
		SELECT a.movie_cd, MAX(a.movie_name) movie_name, SUM(a.pricesum) pricesum_total
		     , SUM(a.seatcnt) seatcnt_total, SUM(NVL(b.pricesum, 0)) pricesum_yesterday
			 , SUM(NVL(b.seatcnt, 0)) seatcnt_yesterday, MAX(a.opendate) opendate, MAX(s.screencnt) screencnt 
		  FROM (
				SELECT MAX(m.MOVIE_CD) movie_cd, MAX(m.MOVIE_NAME) movie_name, SUM(r.PRICESUM) pricesum, COUNT(r.res_seat) seatcnt, MAX(m.opendate) opendate 
				  FROM MOVIE m, RESERVATION r, SCREEN s
				 WHERE m.MOVIE_CD = s.MOVIE_CD 
				   AND r.SCREEN_CD = s.SCREEN_CD
				   AND r.GB_CANCEL = 'N'
				 GROUP BY r.MERCHANT_UID
		  		) a, 
		   		(
				SELECT MAX(m.MOVIE_CD) movie_cd, MAX(m.MOVIE_NAME) movie_name, SUM(r.PRICESUM) pricesum, COUNT(r.res_seat) seatcnt
				  FROM MOVIE m, RESERVATION r, SCREEN s
				 WHERE m.MOVIE_CD = s.MOVIE_CD 
				   AND r.SCREEN_CD = s.SCREEN_CD
				   AND r.GB_CANCEL = 'N'
				   AND r.RESDATE = sysdate - 1
				 GROUP BY r.MERCHANT_UID
		  		) b,
		  		(
		  		SELECT  MOVIE_CD ,COUNT(*) screencnt
				  FROM SCREEN s 
				 GROUP BY MOVIE_CD
		  		) s
		  WHERE a.movie_cd = b.movie_cd(+)
		    AND a.movie_cd = s.MOVIE_CD
		  GROUP BY a.movie_cd
	</select>
</mapper>